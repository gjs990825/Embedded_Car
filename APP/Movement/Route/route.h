#if !defined(_ROUTE_H_)
#define _ROUTE_H_

#include "sys.h"
#include "task.h"
#include "stddef.h"

// 任务个数
#define ROUTE_TASK_NUMBER 20

// 路径点
typedef struct RouteNode_Struct
{
	int8_t x;
	int8_t y;
	int8_t dir; // 基本上没用到
} RouteNode_t;

// 路径点（包含任务信息）
typedef struct Route_Task_Struct
{
	RouteNode_t node;
	void (*Task)(void);
} Route_Task_t;

// 方向（车头朝向）
typedef enum
{
	DIR_NOTSET = 0,
	DIR_UP,
	DIR_LEFT,
	DIR_DOWN,
	DIR_RIGHT
} Driection_t;

// 设定任务点（通过自动转换字符串生成笛卡尔坐标点信息）
typedef struct RouteSetting_Struct
{
	uint8_t coordinate[2];
    RouteNode_t node;
	void (*Task)(void);
} RouteSetting_t;

extern RouteSetting_t RouteTask[];
extern Route_Task_t *AutoGeneratedRouteTask;

#define AUTO_ROUTE_TASK_NUMBER 12

// // 寻卡测试用路径
// static Route_Task_t Route_Task[] = {
//     {.node.x = 5, .node.y = 0, .node.dir = DIR_UP, .Task = NULL},    
//     {.node.x = 5, .node.y = 1, .node.dir = DIR_NOTSET, .Task = Task_F6_Test},
//     {.node.x = 5, .node.y = 3, .node.dir = DIR_NOTSET, .Task = NULL},
//     {.node.x = 3, .node.y = 3, .node.dir = DIR_NOTSET, .Task = Task_3_3_Test},
// };

// 当前位置状态
extern RouteNode_t CurrentStaus;
// 下一个位置状态
extern RouteNode_t NextStatus;

// // 任务完成情况
// extern int8_t RouteTask_Finished[ROUTE_TASK_NUMBER];

// 储存运算出的路径
extern Route_Task_t Final_Route[ROUTE_TASK_NUMBER * 10];

// 记录当前路径步数
extern int16_t Final_StepCount;

RouteNode_t Coordinate_Covent(uint8_t str[2]);
uint8_t *ReCoordinate_Covent(uint8_t x, uint8_t y);
int8_t Get_TaskNumber(uint8_t coordinate[2], uint8_t *route);


//////

bool Generate_Routetask(RouteSetting_t routeSetting[], uint8_t count);


#endif // _ROUTE_H_
